var documenterSearchIndex = {"docs":
[{"location":"functions/#Public-API","page":"Functions","title":"Public API","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [ParallelPlots]\nPrivate = false\nOrder = [:function, :type]","category":"page"},{"location":"functions/#ParallelPlots.parallelplot-Tuple","page":"Functions","title":"ParallelPlots.parallelplot","text":"parallelplot(data::DataFrame, _Arguments_)\n\nArguments\n\nParameter Default Example Description\ntitle::String \"\" title=\"My Title\" The Title of The Figure,\ncolormap :viridis colormap=:thermal The Colors of the Lines\ncolor_feature nothing color_feature=\"weight\" The Color of the Lines will be based on the values of this selected feature. If nothing, the last feature will be used\nfeature_labels nothing feature_labels=[\"Weight\",\"Age\"] Add your own Axis labels, just use the exact amount of labes as you have axis\nfeature_selection nothing feature_selection=[\"weight\",\"age\"] Select, which features should be Displayed. If color_feature is not in this List, use the last one\ncurve false curve=true Show the Lines Curved\nshowcolorlegend nothing showcolorlegend=true Show the Color Legend. If parameter not set & color_feature not shown, it will be displayed automaticly\nscale nothing scale=[identity, log, log2, log10, sqrt] Choose, how each Axis should be scaled.\n\nExamples\n\njulia> using DataFrames\n\njulia> fig, ax, sc = parallelplot(DataFrame(height=160:180,weight=60:80,age=20:40))\nFigureAxisPlot()\n\njulia> display(fig)\nCairoMakie.Screen{IMAGE}\n\nUsing DrWatson with ParallelPlot\n\njulia> using DataFrames, DrWatson, ParallelPlots\n\njulia> function exec_simulation(d::Dict, results)\n           @unpack launch_angles, initial_velocities = d\n           max_height = initial_velocities * launch_angles\n           push!(results, [\n               initial_velocities,\n               launch_angles,\n               max_height,\n           ])\n           return results\n       end;\n\njulia> initial_velocities = [40.0, 50.0];\n\njulia> launch_angles = [30.0, 60.0];\n\njulia> allparams = Dict(\n           \"initial_velocities\" => initial_velocities,\n           \"launch_angles\" => launch_angles,\n       );\n\njulia> dicts = dict_list(allparams);\n\njulia> results = DataFrame(\n           initial_velocity=Float64[],\n           launch_angle=Float64[],\n           max_height=Float64[],\n       );\n\njulia> for d in dicts\n           results = exec_simulation(d, results)\n       end;\n\njulia> fig = parallelplot(results, curve=true, figure = (size = (1000, 600),));\n\njulia> display(fig);\n\n# If you want to set the size of the plot\njulia> parallelplot( DataFrame(height=160:180,weight=60:80,age=20:40), figure = (resolution = (300, 300),) )\n\n# You can update the Graph with Observables as well \njulia> df_observable = Observable(DataFrame(height=160:180,weight=60:80,age=20:40))\njulia> fig, ax, sc = parallelplot(df_observable)\n\n# If you want to add a Title for the Figure, sure you can!\njulia> parallelplot(DataFrame(height=160:180,weight=reverse(60:80),age=20:40),title=\"My Title\")\n\n# If you want to specify the axis labels, make sure to use the same number of labels as you have axis!\njulia> parallelplot(DataFrame(height=160:180,weight=reverse(60:80),age=20:40), feature_labels=[\"Height\",\"Weight\",\"Age\"])\n\n# Adjust Color and and Feature\nparallelplot(df,\n\t\t# You choose which axis/feature should be in charge for the coloring\n        color_feature=\"weight\",\n        # you can as well select, which Axis should be shown\n        feature_selection=[\"height\",\"age\",\"income\"],\n        # and label them as you like\n        feature_labels=[\"Height\",\"Age\",\"Income\"],\n        # you can change the ColorMap (https://docs.makie.org/dev/explanations/colors)\n        colormap=:thermal,\n        # ...and can choose to display the color legend.\n        # If this Attribute is not set,\n        # it will only show the ColorBar, when the color feature is not in the selected feature\n        show_color_legend = true\n    )\n\n# Adjust the Axis scale\nparallelplot(df,\n        feature_selection=[\"height\",\"age\",\"income\"],\n        scale=[log2, identity, log10]\n    )\n\n\n\n\n\n","category":"method"},{"location":"functions/#Internal-API","page":"Functions","title":"Internal API","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [ParallelPlots]\nPublic = false\nOrder = [:function, :type]","category":"page"},{"location":"functions/#ParallelPlots.axis_title!-Tuple{Any, Observables.Observable, String}","page":"Functions","title":"ParallelPlots.axis_title!","text":"axis_title!(\n\tscene,\n\tendpoints::Observable,\n\ttitle::String;\n\ttitlegap = Observable(4.0f0),\n)\n\nThis Function will create the Axis Label for a Axis\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParallelPlots.calc_factor-Union{Tuple{T}, Tuple{T, T, T, Function}} where T<:Real","page":"Functions","title":"ParallelPlots.calc_factor","text":"calc_factor(min::T, max::T, x::T, fun::Function):: Float64 where {T<:Real}\n\nIn Linear Axis represenatation, values between 0-1 are linear distributed. Due to the Logarithmfunction, we need to distribute the values with the given log values to match the axis\n\nInput:\n\nmin::T,\nmax::T,\nx::T,\nfun::Function â€“> [identity, log, log2, log10, sqrt]\n\nOutput:\n\nthe distribution with the given function beween 0 and 1\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParallelPlots.calc_y_coordinate-Tuple{Any, Any, Any, Any, Number, Number, Any}","page":"Functions","title":"ParallelPlots.calc_y_coordinate","text":"calc_y_coordinate(parsed_data, limits, height, offset, feature_index :: Number, sample_index :: Number, scale_list) :: Number\n\nThis function will return the y position in the scene, depending of the scale if set\n\nOutput:\n\nthe y position of the datapoint in the scene\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParallelPlots.calculate_color-Tuple{MakieCore.Plot{ParallelPlots.parallelplot}, DataFrame}","page":"Functions","title":"ParallelPlots.calculate_color","text":"calculate_color(pp::ParallelPlot, data::DataFrame) :: Tuple{AbstractString, Vector{Real}, Real, Real}\n\nCalculates the Color values for the Lines\n\nInput:\n\npp::ParallelPlot\ndata::DataFrame\n\nOutput:\n\ncolorcol  \tresult of `getcolor_col`\ncolorvalues \tThe List of Values of the `colorcol`. Needed to calculate the Color for each Line\ncolormin \tThe min value of `colorvalues`. To Calculate the ColorRange\ncolormax \tThe max value of `colorvalues`. To Calculate the ColorRange\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParallelPlots.create_scale_list-Tuple{Number, Any}","page":"Functions","title":"ParallelPlots.create_scale_list","text":"create_scale_list(numberFeatures :: Number, scale_list)\n\ncheck the length of the given scale Attribute. Throws an Error if the Length does not match the amount of axis/features If scale is not set, identity, so linear will be used for all axis. if the length of the scale attribute does not fit, an assert error will be thrown\n\nInput:\n\nnumberFeatures::Number\nscale_list \tnothing or Vector e.g. [log2, log10, identity]\n\nOutput:\n\ngiven scale_list or vector of [identity, identity, ...] with the length of axis/features\n\nThrows\n\nAssertion, if amount of scales in the scale list does not match the amount of axis/features\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParallelPlots.draw_axis-Tuple{Any, Number, Number, Number, Any, Any, Number, Any}","page":"Functions","title":"ParallelPlots.draw_axis","text":"draw_axis(\n\tscene,\n\twidth::Number,\n\theight::Number,\n\toffset::Number,\n\tlimits,\n\tlabels,\n\tnumberFeatures::Number,\n\tscale_list\n)\n\nDraws the Axis/Feature vertical Axis Lines on the given Scene\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParallelPlots.draw_lines-Tuple{Any, Any, Any, Number, Number, Number, Any, Number, Any, Number, Vararg{Any, 4}}","page":"Functions","title":"ParallelPlots.draw_lines","text":"draw_lines(\n\tscene,\n\tpp,\n\tdata,\n\twidth::Number,\n\theight::Number,\n\toffset::Number,\n\tlimits,\n\tnumberFeatures::Number,\n\tscale_list,\n\tsampleSize::Number,\n\tparsed_data,\n\tcolor_values,\n\tcolor_min,\n\tcolor_max\n)\n\nFunction to Draw the Lines connecting the Values on each Axis into the Plot\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParallelPlots.get_color_col-Tuple{MakieCore.Plot{ParallelPlots.parallelplot}, DataFrame}","page":"Functions","title":"ParallelPlots.get_color_col","text":"get_color_col(pp::ParallelPlot, data::DataFrame) :: AbstractString\n\nget the name of the Column, on which the Color should be dependent\n\nInput:\n\npp::ParallelPlot\ndata::DataFrame\n\nOutput:\n\nAbstractString\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParallelPlots.input_data_check-Tuple{DataFrame}","page":"Functions","title":"ParallelPlots.input_data_check","text":"input_data_check(data::DataFrame)\n\nchecks the Input Data if the size is correct and no missing values are available\n\nInput:\n\nDataFrame\n\nOutput:\n\nnone\n\nTrows\n\nThrows error on wrong DF\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParallelPlots.interpolate-NTuple{5, Float64}","page":"Functions","title":"ParallelPlots.interpolate","text":"interpolate(last_x::Float64, current_x::Float64, last_y::Float64, current_y::Float64, x::Float64)::Float64\n\nInterpolates the Y Value between the given current/last(x/y) point with the given x value.\n\nInput:\n\nold and New Coordinate (x/y Value)\ncurrent x Value\n\nOutput:\n\ncurrent, interpolated y Value\n\n\n\n\n\n","category":"method"},{"location":"functions/#ParallelPlots.show_color_legend!-Tuple{Any}","page":"Functions","title":"ParallelPlots.show_color_legend!","text":"show_color_legend!(pp) :: Bool\n\nReturns Boolean if the Color Legend/Bar on the right should be shown\n\nInput:\n\npp::ParallelPlot\n\nOutput:\n\nboolean if show_color_legend from the Arguments is set, return this value. Else show, when colorfeature is not in featureselection\n\n\n\n\n\n","category":"method"},{"location":"getting_started/#Getting-Started","page":"Getting started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/#Install-Dependencies-and-Use-ParallelPlots","page":"Getting started","title":"Install Dependencies & Use ParallelPlots","text":"","category":"section"},{"location":"getting_started/#Script/REPL","page":"Getting started","title":"Script/REPL","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Pkg> add https://github.com/moritz155/ParallelPlots","category":"page"},{"location":"getting_started/#Notebook","page":"Getting started","title":"Notebook","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"using Pkg\nPkg.add(url=\"https://github.com/moritz155/ParallelPlots\")\nusing ParallelPlots","category":"page"},{"location":"getting_started/#Usage","page":"Getting started","title":"Usage","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"The plot can be customized in many ways. For that, parameters with the according values have to be passed along with the function call. Examples for function calls are depicted below.","category":"page"},{"location":"getting_started/#Available-Parameters","page":"Getting started","title":"Available Parameters","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Parameter Default Example Description\ntitle::String \"\" title=\"My Title\" The Title of the Figure,\ncolormap :viridis colormap=:thermal The Colors of the Lines\ncolor_feature nothing color_feature=\"weight\" The Color of the Lines will be based on the values of this selected feature. If nothing, the last feature will be used.\nfeature_labels nothing feature_labels=[\"Weight\",\"Age\"] Add your own Axis labels, just make sure to use the exact amount of labels you have\nfeature_selection nothing feature_selection=[\"weight\",\"age\"] Select which features should be Displayed. If color_feature is not in this List, use the last one\ncurve false curve=true Either curved edges or sharp edges\nshowcolorlegend nothing showcolorlegend=true Show the Color Legend. If parameter not set & color_feature not shown, it will be displayed automatically\nscale nothing scale=[identity, log, log2, log10, sqrt] Choose the scale of the axis. There must be one for each Y-axis.","category":"page"},{"location":"getting_started/#Examples","page":"Getting started","title":"Examples","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> using ParallelPlots\njulia> parallelplot(DataFrame(height=160:180,weight=60:80,age=20:40))","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"# If you want to set the size of the plot (default width:800, height:600)\njulia> parallelplot( DataFrame(height=160:180,weight=60:80,age=20:40), figure = (resolution = (300, 300),) )","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"# You can update as well the Graph with Observables\njulia> df_observable = Observable(DataFrame(height=160:180,weight=60:80,age=20:40))\njulia> fig, ax, sc = parallelplot(df_observable)","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"# If you want to add a Title for the Figure, sure you can!\njulia> parallelplot(DataFrame(height=160:180,weight=reverse(60:80),age=20:40),title=\"My Title\")","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"# If you want to specify the axis labels, make sure to use the same number of labels as you have axis!\njulia> parallelplot(DataFrame(height=160:180,weight=reverse(60:80),age=20:40), feature_labels=[\"Height\",\"Weight\",\"Age\"])","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"# Adjust Color and and feature\nparallelplot(df,\n        # You choose which axis/feature should be in charge for the coloring\n        color_feature=\"weight\",\n        # you can as well select, which Axis should be shown\n        feature_selection=[\"height\",\"age\",\"income\"],\n        # and label them as you like\n        feature_labels=[\"Height\",\"Age\",\"Income\"],\n        # you can change the ColorMap (https://docs.makie.org/dev/explanations/colors)\n        colormap=:thermal,\n        # ...and can choose to display the color legend.\n        # If this Attribute is not set,\n        # it will only show the ColorBar, when the color feature is not in the selected feature\n        show_color_legend = true\n    )","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"# Adjust the Axis scale\nparallelplot(df,\n        feature_selection=[\"height\",\"age\",\"income\"],\n        scale=[log2, identity, log10]\n    )","category":"page"},{"location":"getting_started/#Working-on-ParallelPlots-/-Cheatsheet","page":"Getting started","title":"Working on ParallelPlots / Cheatsheet","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Using ParallelPlots\nMoving to the  project folder\njulia --project\nYou will see julia>\nTo move to the pkg, type in ]","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Running commands\nAdding external Dependencies\n(ParallelPlots) pkg>add 'DepName'\nRun Tests to check if ParallelPlots is still working as intended\n(ParallelPlots) pkg>test\nBuild\n(ParallelPlots) pkg>build\nPrecompile\n(ParallelPlots) pkg>precompile","category":"page"},{"location":"#ParallelPlots","page":"Home","title":"ParallelPlots","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"#General","page":"Home","title":"General","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This Project is for the TU-Berlin Course \"Julia Programming for Machine Learning\"<br> Please make sure, that Julia 1.10 is used!","category":"page"},{"location":"","page":"Home","title":"Home","text":"This Module will return a nice Makie Plot you can use to display your Data using a Parallel Coordinate Plot<br>.  <img src=\"test/projectile_simulation.png\" width=\"500\" />","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package is heavily based on Makie. This is a data visualization tool that can be used to display various plots such as interactive 3d plots, static vector graphics or plots in a browser. Makie offers four backends that can be chosen from. This project uses CairoMakie which is good for plotting vector graphics. ","category":"page"}]
}
